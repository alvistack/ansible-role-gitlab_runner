#!/bin/bash

# {{ ansible_managed }}

# Copyright 2024 Wong Hoi Sing Edison <hswong3i@pantarei-design.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -euxo pipefail

# Generate a unique machine hostname per job.
VM_HOSTNAME="${VM_HOSTNAME:-"runner-${CUSTOM_ENV_CI_RUNNER_ID}-project-${CUSTOM_ENV_CI_PROJECT_ID}-concurrent-${CUSTOM_ENV_CI_CONCURRENT_PROJECT_ID}"}"
echo ${VM_HOSTNAME} > VM_HOSTNAME

# Export $CI_PIPELINE_URL for debug.
CI_PIPELINE_URL="${CI_PIPELINE_URL:-"${CUSTOM_ENV_CI_PIPELINE_URL}"}"
echo ${CI_PIPELINE_URL} > CI_PIPELINE_URL

# Export $CI_JOB_URL for debug.
CI_JOB_URL="${CI_JOB_URL:-"${CUSTOM_ENV_CI_JOB_URL}"}"
echo ${CI_JOB_URL} > CI_JOB_URL

# Generate Vagrantfile for provision machine per job.
cat > Vagrantfile <<EOF
Vagrant.configure("2") do |config|
{% if vagrant_default_provider | lower == 'docker' %}
  config.vm.provider :docker do |docker|
    docker.name = "${VM_HOSTNAME}"
    docker.image = "{{ gitlab_runner_runners_vagrant_image }}"
    docker.pull = {{ gitlab_runner_runners_vagrant_pull | bool | lower }}
    docker.has_ssh = true
  end

{% for synced_folder in gitlab_runner_runners_vagrant_synced_folders %}
  config.vm.synced_folder "{{ synced_folder.src }}", "{{ synced_folder.dest }}"
{% endfor %}
{% elif vagrant_default_provider | lower == 'libvirt' %}
  config.vm.hostname = "${VM_HOSTNAME}"
  config.vm.box = "{{ gitlab_runner_runners_vagrant_box }}"
  config.vm.box_check_update = {{ gitlab_runner_runners_vagrant_box_check_update | bool | lower }}

  config.vm.provider :libvirt do |libvirt|
    libvirt.cpu_mode = "host-passthrough"
    libvirt.cpus = {{ gitlab_runner_runners_vagrant_cpus | int }}
    libvirt.disk_bus = "virtio"
    libvirt.disk_driver :cache => "writeback"
    libvirt.driver = "kvm"
    libvirt.graphics_ip = "{{ ansible_default_ipv4.address }}"
    libvirt.graphics_type = "vnc"
    libvirt.management_network_address = "{{ gitlab_runner_runners_vagrant_management_network_address }}"
    libvirt.management_network_name = "{{ gitlab_runner_runners_vagrant_management_network_name }}"
    libvirt.memory = {{ gitlab_runner_runners_vagrant_memory | int }}
    libvirt.memorybacking :access, :mode => "shared"
    libvirt.nested = {{ gitlab_runner_runners_vagrant_nested | bool | lower }}
    libvirt.nic_model_type = "virtio"
    libvirt.storage :file, bus: "virtio", cache: "writeback"
    libvirt.video_type = "virtio"
  end

{% for synced_folder in gitlab_runner_runners_vagrant_synced_folders %}
  config.vm.synced_folder "{{ synced_folder.src }}", "{{ synced_folder.dest }}", type: "virtiofs"
{% endfor %}
{% elif vagrant_default_provider | lower == 'virtualbox' %}
  config.vm.hostname = "${VM_HOSTNAME}"
  config.vm.box = "{{ gitlab_runner_runners_vagrant_box }}"
  config.vm.box_check_update = {{ gitlab_runner_runners_vagrant_box_check_update | bool | lower }}

  config.vm.provider :virtualbox do |virtualbox|
    virtualbox.cpus = {{ gitlab_runner_runners_vagrant_cpus | int }}
    virtualbox.memory = {{ gitlab_runner_runners_vagrant_memory | int }}
    virtualbox.customize ["modifyvm", :id, "--cpu-profile", "host"]
    virtualbox.customize ["modifyvm", :id, "--nested-hw-virt", "{{ gitlab_runner_runners_vagrant_nested | bool | ternary('on', 'off') }}"]
  end

{% for synced_folder in gitlab_runner_runners_vagrant_synced_folders %}
  config.vm.synced_folder "{{ synced_folder.src }}", "{{ synced_folder.dest }}"
{% endfor %}
{% endif %}
end
EOF

# Ensure ownership for synced folder.
{% for synced_folder in gitlab_runner_runners_vagrant_synced_folders %}
chown -Rf 1000:1000 {{ synced_folder.src }} || echo $?
{% endfor %}

exit 0
